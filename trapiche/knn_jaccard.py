# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02.05.1_knn_jaccard.ipynb.

# %% auto 0
__all__ = ['TAG', 'DATA_DIR', 'TMP_DIR', 'GENUS_SETS_OUT_D', 'min_annots', 'JACC_CURE_OUT_D', 'fuzzy_mat_file', 'fuzzy_mat',
           'get_g_sets', 'get_nodes_frquencies', 'get_top_k', 'kkn_jaccard']

# %% ../nbs/02.05.1_knn_jaccard.ipynb 3
import glob
import os
import json
import re
import pandas as pd
import math
import numpy as np
from tqdm import tqdm
from ssfMiscUtilities.generic import *

from . import config

# %% ../nbs/02.05.1_knn_jaccard.ipynb 4
from .goldOntologyAmendments import gold_categories,biome_graph,biome_original_graph
from .utils import find_common_lineage

# %% ../nbs/02.05.1_knn_jaccard.ipynb 5
TAG = 'knn_jaccard'

# %% ../nbs/02.05.1_knn_jaccard.ipynb 6
DATA_DIR = f"{config.basedir}/data/{TAG}"

# %% ../nbs/02.05.1_knn_jaccard.ipynb 7
os.makedirs(DATA_DIR,exist_ok=True)

# %% ../nbs/02.05.1_knn_jaccard.ipynb 8
TMP_DIR = f"{DATA_DIR}/temp"

# %% ../nbs/02.05.1_knn_jaccard.ipynb 11
from . import taxonomyTree
from .baseData import analysis_df

# %% ../nbs/02.05.1_knn_jaccard.ipynb 16
def get_g_sets(f):
    se = set()
    with open(f) as h:
        for line in list(h)[1:]:
            spl = re.split("[\t;]",line.strip())
            for s in spl:
                if 'g__' == s[:3]:
                    se.update({s.replace('Candidatus ', '').replace('Candidatus_', '')})
    return se-{'g__'}

# %% ../nbs/02.05.1_knn_jaccard.ipynb 18
GENUS_SETS_OUT_D = f'{TMP_DIR}/genus_sets'

# %% ../nbs/02.05.1_knn_jaccard.ipynb 23
from .utils import jaccard_similarity

# %% ../nbs/02.05.1_knn_jaccard.ipynb 32
# list(biome_original_graph.nodes)
# list of biomes that make biological sense

min_annots = {
    'root:Engineered:Biogas plant',
    'root:Engineered:Bioreactor',
    'root:Engineered:Food production',
    'root:Engineered:Solid waste',
    'root:Engineered:Wastewater',
    'root:Environmental:Air',
    'root:Host-associated:Algae',
    'root:Host-associated:Cnidaria',
    'root:Host-associated:Echinodermata',
    'root:Host-associated:Fungi',
    'root:Host-associated:Porifera',
    'root:Environmental:Aquatic:Aquaculture',
    'root:Environmental:Aquatic:Estuary',
    'root:Environmental:Aquatic:Freshwater',
    'root:Environmental:Aquatic:Lentic',
    'root:Environmental:Aquatic:Marine',
    'root:Environmental:Aquatic:Meromictic lake',
    'root:Environmental:Aquatic:Non-marine Saline and Alkaline',
    'root:Environmental:Aquatic:Sediment',
    'root:Environmental:Aquatic:Thermal springs',
    'root:Environmental:Terrestrial:Agricultural field',
    'root:Environmental:Terrestrial:Asphalt lakes',
    'root:Environmental:Terrestrial:Deep subsurface',
    'root:Environmental:Terrestrial:Geologic',
    'root:Environmental:Terrestrial:Oil reservoir',
    'root:Environmental:Terrestrial:Rock-dwelling (subaerial biofilm)',
    'root:Environmental:Terrestrial:Soil',
    'root:Environmental:Terrestrial:Volcanic',
    'root:Host-associated:Amphibia:Digestive system',
    'root:Host-associated:Amphibia:Excretory system',
    'root:Host-associated:Animal:Circulatory system',
    'root:Host-associated:Animal:Digestive system',
    'root:Host-associated:Animal:Fossil',
    'root:Host-associated:Animal:Reproductive system',
    'root:Host-associated:Animal:Respiratory system',
    'root:Host-associated:Animal:Skin',
    'root:Host-associated:Annelida:Digestive system',
    'root:Host-associated:Annelida:Integument',
    'root:Host-associated:Annelida:Intracellular endosymbionts',
    'root:Host-associated:Annelida:Reproductive system',
    'root:Host-associated:Arthropoda:Digestive system',
    'root:Host-associated:Arthropoda:Integument',
    'root:Host-associated:Arthropoda:Intracellular endosymbionts',
    'root:Host-associated:Arthropoda:Oral cavity',
    'root:Host-associated:Arthropoda:Respiratory system',
    'root:Host-associated:Arthropoda:Symbiotic fungal gardens and galleries',
    'root:Host-associated:Arthropoda:Venom gland',
    'root:Host-associated:Birds:Circulatory system',
    'root:Host-associated:Birds:Digestive system',
    'root:Host-associated:Birds:Reproductive system',
    'root:Host-associated:Birds:Respiratory system',
    'root:Host-associated:Fish:Circulatory system',
    'root:Host-associated:Fish:Digestive system',
    'root:Host-associated:Fish:Excretory system',
    'root:Host-associated:Fish:Reproductive system',
    'root:Host-associated:Fish:Skin',
    'root:Host-associated:Human:Circulatory system',
    'root:Host-associated:Human:Digestive system',
    'root:Host-associated:Human:Excretory system',
    'root:Host-associated:Human:Fossil',
    'root:Host-associated:Human:Lympathic system',
    'root:Host-associated:Human:Milk',
    'root:Host-associated:Human:Nervous system',
    'root:Host-associated:Human:Reproductive system',
    'root:Host-associated:Human:Respiratory system',
    'root:Host-associated:Human:Skin',
    'root:Host-associated:Insecta:Digestive system',
    'root:Host-associated:Invertebrates:Bryozoans',
    'root:Host-associated:Invertebrates:Cnidaria',
    'root:Host-associated:Invertebrates:Echinodermata',
    'root:Host-associated:Mammals:Circulatory system',
    'root:Host-associated:Mammals:Digestive system',
    'root:Host-associated:Mammals:Excretory system',
    'root:Host-associated:Mammals:Gastrointestinal tract',
    'root:Host-associated:Mammals:Lymphatic',
    'root:Host-associated:Mammals:Milk',
    'root:Host-associated:Mammals:Nervous system',
    'root:Host-associated:Mammals:Reproductive system',
    'root:Host-associated:Mammals:Respiratory system',
    'root:Host-associated:Mammals:Skin',
    'root:Host-associated:Microbial:Bacteria',
    'root:Host-associated:Microbial:Dinoflagellates',
    'root:Host-associated:Mollusca:Digestive system',
    'root:Host-associated:Mollusca:Respiratory system',
    'root:Host-associated:Mollusca:Shell',
    'root:Host-associated:Plants:Phylloplane',
    'root:Host-associated:Plants:Rhizome',
    'root:Host-associated:Plants:Rhizoplane',
    'root:Host-associated:Plants:Rhizosphere',
    'root:Host-associated:Plants:Root',
    'root:Host-associated:Reptile:Oral cavity',
    'root:Host-associated:Tunicates:Ascidians',
}

# %% ../nbs/02.05.1_knn_jaccard.ipynb 40
JACC_CURE_OUT_D = f'{TMP_DIR}/jac_cure_sets_full_ne7'
print(JACC_CURE_OUT_D)
os.makedirs(JACC_CURE_OUT_D,exist_ok=True)

# %% ../nbs/02.05.1_knn_jaccard.ipynb 47
def get_nodes_frquencies(co):
    """ Calculate fuzzy array for each sample
    The idea is that each node in the BIOME_AMEND space is a fuzzy category that can be calculated via the frequency of the node in the lineage of the KNN samples:
    """
    """ Function to calculate the requency of each node in the lineages of the knn samples
    """
    total_samples = co.sum()
    _node_frquencies = {}
    for lineage,count in co.items():
        for node in lineage.split(':'):
            _node_frquencies.setdefault(node,[]).append(count)
    node_frequencies = {k:sum(v)/total_samples for k,v in _node_frquencies.items()}
    return node_frequencies

# %% ../nbs/02.05.1_knn_jaccard.ipynb 49
def get_top_k(screening_index,_fuzzy_mat):
    fuzzy_sum = np.sum(_fuzzy_mat[screening_index], axis=0) / len(screening_index)
    # fuzzy_sum[fuzzy_sum > 90.] = 90.
    _selection = {nodes_list[x]:1 for x in np.where(fuzzy_sum>0.5)[0]}
    prediction,w_jacc = get_best_shot(_selection,weighted_jaccard)[0]

    return prediction,w_jacc

# %% ../nbs/02.05.1_knn_jaccard.ipynb 78
fuzzy_mat_file = f"{TMP_DIR}/fuzzy_mat_amended_file.npy"

# %% ../nbs/02.05.1_knn_jaccard.ipynb 80
fuzzy_mat = np.load(fuzzy_mat_file)

# %% ../nbs/02.05.1_knn_jaccard.ipynb 88
from .utils import find_common_lineage
import glob

# %% ../nbs/02.05.1_knn_jaccard.ipynb 89
def kkn_jaccard(files_list,_ks):    
# for files_list,k in [(test_list,[1,5,10])]:
    ks = _ks if type(_ks) == list else [_ks]
    res = {}
    for f in files_list:
        se = get_g_sets(f)
        
        # root to files not containing g__
        if len(se)==0:
            for k in ks:
                res.setdefault(f,[]).append((k,'root'))
            
        
        sims = [(ix,jaccard_similarity(se,se2)) for ix,se2 in enumerate(knn_jacc_df.g_set)]
        ords = sorted(sims,key = lambda x:x[1],reverse=True)
        ord_ind = [x[0] for x in ords]
        nord = knn_jacc_df.iloc[ord_ind]
        
        for k in ks:
            res.setdefault(f,[]).append((k,find_common_lineage(list(nord.iloc[:k].cured_biome_amend))))
            # res.setdefault(f,[]).append((k,find_common_lineage(list(nord.iloc[:k].biome_amend))))
    return res
