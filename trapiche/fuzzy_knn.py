# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02.05.01_fuzzy_knn.ipynb.

# %% auto 0
__all__ = ['TAG', 'DATA_DIR', 'TMP_DIR', 'min_annots', 'stable_knn_results_df', 'stable_knn_jacc_df', 'BIOME_AMEND_ABUNDANCE',
           'nodes_list', 'fuzzy_mat_file', 'stable_fuzzy_mat', 'get_species_from_diamond_set',
           'process_get_average_embedd_macro_average_by_genus', 'process_diamond', 'process_krona', 'extract_taxo',
           'get_top_k_function', 'get_nodes_frquencies', 'weighted_jaccard', 'get_best_shot', 'get_top_k', 'get_genus',
           'jacc_knn', 'predict_runs']

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 4
import glob
import os
import json
import re
import pandas as pd
import math
import numpy as np
from tqdm import tqdm
from ssfMiscUtilities.generic import *

from . import config

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 5
from .goldOntologyAmendments import gold_categories,biome_graph,biome_original_graph,biome_herarchy_dct
from .utils import find_common_lineage

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 8
TAG = 'fuzzy_knn'

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 9
DATA_DIR = f"{config.basedir}/data/{TAG}"

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 10
os.makedirs(DATA_DIR,exist_ok=True)

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 11
TMP_DIR = f"{DATA_DIR}/temp"

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 15
from .utils import cosine_similarity,jaccard_similarity,cosine_similarity_pairwise

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 18
# from trapiche.biome2vec import taxo_ids
from .taxonomyTree import taxonomy_graph
# from trapiche.biome2vec import sentence_vectorization
# from trapiche.baseData import load_taxonomy_sets

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 21
def get_species_from_diamond_set(taxo_set):
    """ function to extract the tax_annot as sp level in diamond
    """
    resu =  set()
    for x in taxo_set:
        spl = x.split()
        if len(spl)<2:continue
        resu.update({" ".join(x.split()[:2])})
    return resu

def process_get_average_embedd_macro_average_by_genus(set_of_species):
    """ function to calculate macro average vector at sp level, weighted by genus
    return dictionary with {genus:vector_of_sp_at_genus}
    """
    dct,mat = {},{}
    for i in set_of_species:
        dct.setdefault(i.split()[0],[]).append(i)
    
    for g,s in dct.items():
        cu = sentence_vectorization(s)
        mat[g] = cu
    return mat

def process_diamond(taxo_set):
    """ function to extract species and genus from diamon taxonomic annot
    """
    sp = get_species_from_diamond_set(taxo_set)
    gr = {x.split()[0] for x in sp}
    return sp,gr


# %% ../nbs/02.05.01_fuzzy_knn.ipynb 22
def process_krona(taxo_set):
    """ function to extract species and genus from SSU/LLU taxonomic annot
    """
    sp = {" ".join(x.split('__')[-1].replace('_',' ').split()[:2]).replace('_',' ') for x in taxo_set if len( x.split('__')[-1].replace('_',' ').split() )>1}
    gr = {x.split('__')[-1] for x in taxo_set if 'g' == x.split('__')[0]}
    return sp,gr


# %% ../nbs/02.05.01_fuzzy_knn.ipynb 23
def extract_taxo(taxo_set,file):
    """Wrapper to extract taxo from diamond or krona given a set of taxonomic annotations
    """
    if 'diamond' in file:
        sp,gr = process_diamond(taxo_set)
    else:
        sp,gr = process_krona(taxo_set)
    return sp,gr

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 26
from . import taxonomyTree
from .baseData import analysis_df

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 33
# list(biome_original_graph.nodes)
# list of biomes that make biological sense

min_annots = {
    'root:Engineered:Biogas plant',
    'root:Engineered:Bioreactor',
    'root:Engineered:Food production',
    'root:Engineered:Solid waste',
    'root:Engineered:Wastewater',
    'root:Environmental:Air',
    'root:Host-associated:Algae',
    'root:Host-associated:Cnidaria',
    'root:Host-associated:Echinodermata',
    'root:Host-associated:Fungi',
    'root:Host-associated:Porifera',
    'root:Environmental:Aquatic:Aquaculture',
    'root:Environmental:Aquatic:Estuary',
    'root:Environmental:Aquatic:Freshwater',
    'root:Environmental:Aquatic:Lentic',
    'root:Environmental:Aquatic:Marine',
    'root:Environmental:Aquatic:Meromictic lake',
    'root:Environmental:Aquatic:Non-marine Saline and Alkaline',
    'root:Environmental:Aquatic:Sediment',
    'root:Environmental:Aquatic:Thermal springs',
    'root:Environmental:Terrestrial:Agricultural field',
    'root:Environmental:Terrestrial:Asphalt lakes',
    'root:Environmental:Terrestrial:Deep subsurface',
    'root:Environmental:Terrestrial:Geologic',
    'root:Environmental:Terrestrial:Oil reservoir',
    'root:Environmental:Terrestrial:Rock-dwelling (subaerial biofilm)',
    'root:Environmental:Terrestrial:Soil',
    'root:Environmental:Terrestrial:Volcanic',
    'root:Host-associated:Amphibia:Digestive system',
    'root:Host-associated:Amphibia:Excretory system',
    'root:Host-associated:Animal:Circulatory system',
    'root:Host-associated:Animal:Digestive system',
    'root:Host-associated:Animal:Fossil',
    'root:Host-associated:Animal:Reproductive system',
    'root:Host-associated:Animal:Respiratory system',
    'root:Host-associated:Animal:Skin',
    'root:Host-associated:Annelida:Digestive system',
    'root:Host-associated:Annelida:Integument',
    'root:Host-associated:Annelida:Intracellular endosymbionts',
    'root:Host-associated:Annelida:Reproductive system',
    'root:Host-associated:Arthropoda:Digestive system',
    'root:Host-associated:Arthropoda:Integument',
    'root:Host-associated:Arthropoda:Intracellular endosymbionts',
    'root:Host-associated:Arthropoda:Oral cavity',
    'root:Host-associated:Arthropoda:Respiratory system',
    'root:Host-associated:Arthropoda:Symbiotic fungal gardens and galleries',
    'root:Host-associated:Arthropoda:Venom gland',
    'root:Host-associated:Birds:Circulatory system',
    'root:Host-associated:Birds:Digestive system',
    'root:Host-associated:Birds:Reproductive system',
    'root:Host-associated:Birds:Respiratory system',
    'root:Host-associated:Fish:Circulatory system',
    'root:Host-associated:Fish:Digestive system',
    'root:Host-associated:Fish:Excretory system',
    'root:Host-associated:Fish:Reproductive system',
    'root:Host-associated:Fish:Skin',
    'root:Host-associated:Human:Circulatory system',
    'root:Host-associated:Human:Digestive system',
    'root:Host-associated:Human:Excretory system',
    'root:Host-associated:Human:Fossil',
    'root:Host-associated:Human:Lympathic system',
    'root:Host-associated:Human:Milk',
    'root:Host-associated:Human:Nervous system',
    'root:Host-associated:Human:Reproductive system',
    'root:Host-associated:Human:Respiratory system',
    'root:Host-associated:Human:Skin',
    'root:Host-associated:Insecta:Digestive system',
    'root:Host-associated:Invertebrates:Bryozoans',
    'root:Host-associated:Invertebrates:Cnidaria',
    'root:Host-associated:Invertebrates:Echinodermata',
    'root:Host-associated:Mammals:Circulatory system',
    'root:Host-associated:Mammals:Digestive system',
    'root:Host-associated:Mammals:Excretory system',
    'root:Host-associated:Mammals:Gastrointestinal tract',
    'root:Host-associated:Mammals:Lymphatic',
    'root:Host-associated:Mammals:Milk',
    'root:Host-associated:Mammals:Nervous system',
    'root:Host-associated:Mammals:Reproductive system',
    'root:Host-associated:Mammals:Respiratory system',
    'root:Host-associated:Mammals:Skin',
    'root:Host-associated:Microbial:Bacteria',
    'root:Host-associated:Microbial:Dinoflagellates',
    'root:Host-associated:Mollusca:Digestive system',
    'root:Host-associated:Mollusca:Respiratory system',
    'root:Host-associated:Mollusca:Shell',
    'root:Host-associated:Plants:Phylloplane',
    'root:Host-associated:Plants:Rhizome',
    'root:Host-associated:Plants:Rhizoplane',
    'root:Host-associated:Plants:Rhizosphere',
    'root:Host-associated:Plants:Root',
    'root:Host-associated:Reptile:Oral cavity',
    'root:Host-associated:Tunicates:Ascidians',
}

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 39
def get_top_k_function(subsject_df,arg_sort_sim,k,limit=1000,study_lab='STUDY_ID'):
    heads = int(k/3)+1
    
    tmp = subsject_df.loc[arg_sort_sim[:limit]].groupby(study_lab, group_keys=False).apply(lambda x: x.head(heads))
    nored = [x for x in arg_sort_sim[:limit] if x in tmp.index]
    screening = tmp.loc[nored].iloc[:k]
    return screening

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 40
def get_nodes_frquencies(co):
    """ Calculate fuzzy array for each sample
    The idea is that each node in the BIOME_AMEND space is a fuzzy category that can be calculated via the frequency of the node in the lineage of the KNN samples:
    """
    """ Function to calculate the requency of each node in the lineages of the knn samples
    """
    total_samples = co.sum()
    _node_frquencies = {}
    for lineage,count in co.items():
        for node in lineage.split(':'):
            _node_frquencies.setdefault(node,[]).append(count)
    node_frequencies = {k:sum(v)/total_samples for k,v in _node_frquencies.items()}
    return node_frequencies

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 41
def weighted_jaccard(dict1, dict2):
    """ cate weighted jaccars similarity
    """
    # Calculate the numerator: sum of minimum values for shared keys
    min_sum = sum([min(dict1[species], dict2[species]) for species in set(dict1) & set(dict2)])
    
    # Calculate the denominator: sum of maximum values for all keys
    max_sum = sum([max(dict1.get(species, 0), dict2.get(species, 0)) for species in set(dict1) | set(dict2)])
    
    return min_sum / max_sum if max_sum != 0 else 0
    
def get_best_shot(_selection,func,restriction=''):
    """ Function tio calculate which is the best matching lineage based on weighted jaccard of fuzzy tags
    """
    js = {k:func(_selection, abund) for k,abund in BIOME_AMEND_ABUNDANCE.items() if restriction in k}
    so = sorted(js.items(),key=lambda x:-x[1])
    return so[:3]

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 42
def get_top_k(screening_index,_fuzzy_mat):
    fuzzy_sum = np.sum(_fuzzy_mat[screening_index], axis=0) / len(screening_index)
    fuzzy_sum[(fuzzy_sum > .5) &( fuzzy_sum < .95)] = .95
    _selection = {nodes_list[ix]:fuzzy_sum[ix] for ix in np.where(fuzzy_sum>0.5)[0]}
    prediction,w_jacc = get_best_shot(_selection,weighted_jaccard)[0]

    return prediction,w_jacc

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 101
stable_knn_results_df = f"{DATA_DIR}/stable_knn_jacc_df_with_results.tsv"

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 104
stable_knn_jacc_df = pd.read_csv(stable_knn_results_df,sep='\t')
stable_knn_jacc_df['set'] = [set(g.split('|')) for g in stable_knn_jacc_df.g_set_str]

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 105
BIOME_AMEND_ABUNDANCE= {x:{xx:1. for xx in x.split(":")} for x in list(biome_herarchy_dct.values())}
nodes_list = sorted({n for l in stable_knn_jacc_df.BIOME_AMEND.unique() for n in l.split(':')[1:]})

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 106
fuzzy_mat_file = f"{TMP_DIR}/fuzzy_mat_amended_file.npy"

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 108
stable_fuzzy_mat = np.load(fuzzy_mat_file)

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 111
from .utils import find_common_lineage
from .baseData import tax_annotations_from_file
import glob

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 112
def get_genus(list_of_tax_files):
    """ function to predicrize a run based on multiple taxonomy files. e.g. diamond +LSU+SSU, or SSU+LSU
    """
    taxo_sets = {f:tax_annotations_from_file(f) for f in list_of_tax_files}
    tax_tags = {'gr':set()}
    for f,taxos in taxo_sets.items():
        sp,gr = extract_taxo(taxos,f)
        tax_tags['gr'].update(gr)
    return tax_tags['gr']


# %% ../nbs/02.05.01_fuzzy_knn.ipynb 113
def jacc_knn(query_set,k):
    """ Function to use fuzzy tags for prediction of biome based on taxonomic compositon
    """
    sims = [(_ix,jaccard_similarity(query_set,se2)) for _ix,se2 in stable_knn_jacc_df.set.items()]
    ords = sorted(sims,key = lambda x:x[1],reverse=True)
    arg_sort_sim = list(list(zip(*ords))[0])

    screening = list(get_top_k_function(stable_knn_jacc_df,arg_sort_sim,k=k).index)
    return screening

# %% ../nbs/02.05.01_fuzzy_knn.ipynb 114
def predict_runs(
    list_of_list, # list where each element represents a run, with multiple files from taxonomy annotation
    k=30, # knn
    baseline=False, # Predict using the non-fuzzy baseline method
                ):
    """ function to predict lineage of runs, based on multiple taxonomy files. e.g. diamond +LSU+SSU, or SSU+LSU. TAKE FILE WITH TXT FORMAT e.g DRR244685_MERGED_FASTQ_SSU.fasta.mseq.txt
    """
    results = []
    for ix,li in enumerate(list_of_list):
        _query_set = get_genus(li)-{''}
        screening = jacc_knn(_query_set,k=k)
        if baseline:
            prediction,score = find_common_lineage(list(stable_knn_jacc_df.loc[screening].BIOME_AMEND)),None
        else:
            prediction,score = get_top_k(screening,stable_fuzzy_mat)
        results.append([prediction,score])
    
    return results

