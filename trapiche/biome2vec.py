# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01.1_biome2vec.ipynb.

# %% auto 0
__all__ = ['TAG', 'DATA_DIR', 'TMP_DIR', 'taxo_ids', 'SG', 'biome2vec_file', 'model_vocab_file', 'vec_file', 'vec',
           'vectors_df_file', 'load_biome2vec', 'sentence_vectorization', 'get_terminals', 'get_mean',
           'load_full_vectors']

# %% ../nbs/01.1_biome2vec.ipynb 3
import glob
import os
import re
import json
import pandas as pd
import shutil
import numpy as np
from tqdm import tqdm
from ssfMiscUtilities.generic import *

from . import config
from . import taxonomyTree

import networkx as nx

# %% ../nbs/01.1_biome2vec.ipynb 5
TAG = 'biome2vec'

# %% ../nbs/01.1_biome2vec.ipynb 6
DATA_DIR = f"{config.datadir}/{TAG}"
TMP_DIR = f"{DATA_DIR}/temp"
os.makedirs(TMP_DIR,exist_ok=True)

# %% ../nbs/01.1_biome2vec.ipynb 16
from . import taxonomyTree

# %% ../nbs/01.1_biome2vec.ipynb 28
taxo_ids = {x:ix for ix,x in enumerate(taxonomyTree.taxonomy_graph.nodes)}

# %% ../nbs/01.1_biome2vec.ipynb 34
from gensim.models import Word2Vec

# %% ../nbs/01.1_biome2vec.ipynb 37
SG = 1 # 1 for skip gram

# %% ../nbs/01.1_biome2vec.ipynb 38
biome2vec_file = f"{DATA_DIR}/word2vec.sg_{SG}_full.model"

# %% ../nbs/01.1_biome2vec.ipynb 42
model_vocab_file = f"{DATA_DIR}/model_vocab.json"

# %% ../nbs/01.1_biome2vec.ipynb 44
with open(model_vocab_file) as h:
    model_vocab = json.load(h)

# %% ../nbs/01.1_biome2vec.ipynb 46
def load_biome2vec():
    biome2vec = Word2Vec.load(biome2vec_file)
    return biome2vec

# %% ../nbs/01.1_biome2vec.ipynb 49
vec_file =f'{biome2vec_file}.wv.vectors.npy'

# %% ../nbs/01.1_biome2vec.ipynb 51
vec = np.load(vec_file)

# %% ../nbs/01.1_biome2vec.ipynb 52
from .utils import cosine_similarity

# %% ../nbs/01.1_biome2vec.ipynb 53
def sentence_vectorization(terminals):
    # tax ='Laterosporus'
    tix_=[taxo_ids.get(tax) for tax in terminals]
    tixs = [x for x in tix_ if x!=None]
    v_ixs_ = [model_vocab.get(str(tix)) for tix in tixs]
    v_ixs = [x for x in v_ixs_ if x!=None]
    _t = [vec[v_ix] for v_ix in v_ixs]
    
    # _t = [x for x in terminals if x in embs]
    mean = np.mean(_t,axis=0)
    return mean

# %% ../nbs/01.1_biome2vec.ipynb 55
def get_terminals(
    edges:list  # List of edges of the taxonomy subgraph
):
    " get leaves of subgraph "
    H = nx.DiGraph()
    H.add_edges_from([x for x in edges if x[0]!=x[1] ])
    terminal = [x for x in H.nodes() if H.out_degree(x)==0 and H.in_degree(x)==1 ]
    terminal = [x for x in terminal if len(x.split()) ==1]
    return terminal

# %% ../nbs/01.1_biome2vec.ipynb 56
def get_mean(f):
    taxo_terminals = {}
    with open(f) as h:
        dct = json.load(h)

    for k,edges in dct.items():
        terminal = get_terminals(edges)
        taxo_terminals[k] = terminal
    return taxo_terminals
        # terminal = [embs.get(x) for x in H.nodes() if H.out_degree(x)==0 and H.in_degree(x)==1 ]
        # if len(terminal)==0:
        #     continue
        # mean = np.mean([x for x in terminal ],axis=0)
        # taxo_compositions[k] = mean

# %% ../nbs/01.1_biome2vec.ipynb 80
vectors_df_file = f"{DATA_DIR}/jobIdVectors.sg_{SG}_full.csv"

# %% ../nbs/01.1_biome2vec.ipynb 82
def load_full_vectors():
    vectors_df = pd.read_csv(vectors_df_file,index_col=0)
    return vectors_df
